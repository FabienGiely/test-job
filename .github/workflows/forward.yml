name: Forward merges (ancestor-based)

on:
  push:
    branches: [ "release/*" ]

permissions:
  contents: read
  pull-requests: write

jobs:
  detect-targets:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build.outputs.matrix }}
    env:
      INCLUDE_MAIN: "true"
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Build ancestor-based targets
        id: build
        shell: bash
        run: |
          set -euo pipefail
          SRC="${GITHUB_REF_NAME}"   # ex: release/6.1
          if [[ ! "$SRC" =~ ^release/([0-9]+)\.([0-9]+)$ ]]; then
            echo "matrix=[]" >> "$GITHUB_OUTPUT"; exit 0
          fi
          MAJOR="${BASH_REMATCH[1]}"

          # Récupère toutes les branches release/<MAJOR>.*
          git fetch --prune origin '+refs/heads/*:refs/remotes/origin/*'
          mapfile -t rels < <(git ls-remote --heads origin "release/${MAJOR}.*" \
            | awk '{print $2}' | sed 's#refs/heads/##' | sort -t. -k2,2n)

          # Garde celles dont SRC est ancêtre (branche issue de SRC)
          targets=()
          for T in "${rels[@]}"; do
            [[ "$T" == "$SRC" ]] && continue
            if git merge-base --is-ancestor "origin/${SRC}" "origin/${T}"; then
              targets+=("$T")
            fi
          done

          # ajouter main
          if [[ "${INCLUDE_MAIN}" == "true" ]]; then
            targets+=("main")
          fi

          # Dédup + JSON matrix.include
          uniq=$(printf "%s\n" "${targets[@]}" | awk 'NF && !seen[$0]++')
          if [[ -z "${uniq}" ]]; then echo "matrix=[]" >> "$GITHUB_OUTPUT"; exit 0; fi

          json='['; sep=''
          while IFS= read -r t; do json="${json}${sep}{\"base\":\"${t}\"}"; sep=','; done <<< "${uniq}"
          json="${json}]"
          echo "matrix=${json}" >> "$GITHUB_OUTPUT"

  forward:
    needs: detect-targets
    if: ${{ needs.detect-targets.outputs.matrix != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.detect-targets.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Ensure both branches are fetched
        shell: bash
        run: |
          SRC="${GITHUB_REF_NAME}"
          TGT="${{ matrix.base }}"
          git fetch origin "$SRC":"refs/remotes/origin/$SRC" || true
          git fetch origin "$TGT":"refs/remotes/origin/$TGT" || true

      - name: Decide if PR needed (ahead + diff)
        id: decide
        shell: bash
        run: |
          SRC="${GITHUB_REF_NAME}"
          TGT="${{ matrix.base }}"
          AHEAD=$(git rev-list --right-only --count "origin/${TGT}...origin/${SRC}" || echo 0)
          DIFF=$(git diff --name-only "origin/${TGT}...origin/${SRC}" | wc -l | xargs)
          echo "ahead=${AHEAD}" >> "$GITHUB_OUTPUT"
          echo "diff=${DIFF}"   >> "$GITHUB_OUTPUT"
          echo "src=${SRC}"     >> "$GITHUB_OUTPUT"
          echo "tgt=${TGT}"     >> "$GITHUB_OUTPUT"
          echo "AHEAD=$AHEAD DIFF=$DIFF for $SRC → $TGT"

      - name: Create PR via REST if needed
        if: ${{ steps.decide.outputs.ahead != '0' && steps.decide.outputs.diff != '0' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const src = `${{ steps.decide.outputs.src }}`;
            const base = `${{ steps.decide.outputs.tgt }}`;
            // Déduplique : PR ouverte existante ?
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${src}`,
              base
            });
            if (prs.data.length > 0) {
              core.info(`PR already open: #${prs.data[0].number}`); return;
            }
            const title = `chore: forward ${src} → ${base}`;
            const body  = `Propagation automatique depuis \`${src}\`.\n(AHEAD=${{ steps.decide.outputs.ahead }}, DIFF=${{ steps.decide.outputs.diff }})`;
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              head:  src,
              base,
              title,
              body
            });
            core.info(`Opened PR #${pr.data.number}`);
