name: Forward merges (multi-line)
on:
  push:
    branches: [ "release/*" ]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: forward-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-targets:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build.outputs.matrix }}   # ← on sort un tableau JSON d'objets { "base": "…" }
    env:
      MAX_FORWARD: "5"
      INCLUDE_MAIN: "true"
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Build forward matrix JSON
        id: build
        shell: bash
        run: |
          set -euo pipefail
          branch="${GITHUB_REF_NAME}"   # ex: release/6.1
          if [[ ! "$branch" =~ ^release/([0-9]+)\.([0-9]+)$ ]]; then
            echo "Not a release/M.N branch" >&2
            echo 'matrix=[]' >> "$GITHUB_OUTPUT"
            exit 0
          fi
          M="${BASH_REMATCH[1]}"
          N="${BASH_REMATCH[2]}"

          # Liste des branches release/M.*
          mapfile -t rels < <(git ls-remote --heads origin "refs/heads/release/${M}.*" \
                               | awk '{print $2}' | sed 's#refs/heads/##' \
                               | sort -t. -k2,2n)

          # Construit la liste des cibles: release/M.(N+1..N+MAX_FORWARD) si elles existent
          targets=()
          for ((i=1; i<=${MAX_FORWARD}; i++)); do
            next="release/${M}.$((N+i))"
            if printf '%s\n' "${rels[@]}" | grep -qx "$next"; then
              targets+=("$next")
            fi
          done

          # Ajoute main si demandé
          if [[ "${INCLUDE_MAIN}" == "true" ]]; then
            targets+=("main")
          fi

          # Déduplique
          # shellcheck disable=SC2207
          targets=($(printf '%s\n' "${targets[@]}" | awk '!seen[$0]++'))

          # Construit un JSON pour matrix.include: [ {"base":"release/6.2"}, {"base":"main"} ]
          if [ ${#targets[@]} -eq 0 ]; then
            echo 'matrix=[]' >> "$GITHUB_OUTPUT"
            exit 0
          fi

          json='['
          sep=''
          for t in "${targets[@]}"; do
            # échappe les quotes si jamais
            esc=$(printf '%s' "$t" | sed 's/"/\\"/g')
            json="${json}${sep}{\"base\":\"${esc}\"}"
            sep=','
          done
          json="${json}]"

          # Exporte proprement (ligne unique)
          echo "matrix=${json}" >> "$GITHUB_OUTPUT"

  forward:
    needs: detect-targets
    if: ${{ needs.detect-targets.outputs.matrix != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.detect-targets.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Open/Update PR to ${{ matrix.base }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "chore: forward merge `${{ github.ref_name }}` → `${{ matrix.base }}`"
          body: "Propagation automatique depuis `${{ github.ref_name }}`."
          base: ${{ matrix.base }}
          branch: auto/forward/${{ github.ref_name }}-to-${{ matrix.base }}
          delete-branch: true
